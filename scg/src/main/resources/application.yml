server:
  port: 8000

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defalutZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  redis:
    host: localhost
    port: 6379
  #  rabbitmq:
#    host: 127.0.0.1
#    port: 5672
#    username: guest
#    password: guest
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedHeaders: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - OPTIONS
              - DELETE
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
        - name: CircuitBreaker
          args:
            name: mycb


      routes:
        ####################### FRONT ##################
        - id: frontend
          uri: lb://FRONTEND
          predicates:
            - Path=/view/**
          filters:
            - RewritePath=/view/(?<segment>.*), /$\{segment}
        ####################### FRONT ##################
        ####################### USER(AUTH)-SERVICE(LOGIN,SIGN UP, TOKEN GEN) ##################
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/removeToken, /user-service/login, /user-service/auth/**
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - CookieSetFilter
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=GET,POST
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        #########################################
        ####################### CATALOG-SERVICE ##################
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
          filters:
            - RewritePath=/catalog-service/(?<segment>.*), /$\{segment}
        ####################### CATALOG-SERVICE ##################
        ####################### ORDER-SERVICE ##################
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
          filters:
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        ####################### ORDER-SERVICE ##################
        ####################### PAYMENT-SERVICE ##################
        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payment-service/**
          filters:
            - RewritePath=/payment-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        ####################### PAYMENT-SERVICE ##################


management:
  endpoint:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, info, httptrace, busrefresh, metrics, prometheus

token:
  secret: testKey
  expiration_time: 86400000


resilience4j.ratelimiter:
  instances:
    testCircuitBreaker:
      limitForPeriod: 2
      # limitRefreshPeriod 기간 동안 허용되는 요청 수
      limitRefreshPeriod: 5000ns
      # limit refresh 기간
      timeoutDuration: 5s
      # 허가를 위해 쓰레드가 대기하는 기본 시간
      registerHealthIndicator: true

